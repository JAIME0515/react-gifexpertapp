{"version":3,"sources":["Components/CategoryAdd.js","Components/GifGriditem.js","helpers/GetGifs.js","Components/GifGrid.js","hooks/UseFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGird","loading","state","Setstate","useEffect","then","imgs","catch","error","useFetchGifs","GifExpertApp","categories","divroot","document","querySelector","ReactDOM","render"],"mappings":"4MAGaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OAEI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMd,SACA,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdtB,SAACP,GACjBF,EAAcE,EAAEQ,OAAOF,a,QCLlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,GAAGC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,IAElC,OADAC,QAAQC,IAAIJ,EAAGC,EAAMC,GAErB,sBAAKG,UAAU,4CAAf,UACE,qBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,kCAAMA,EAAN,W,8BCPOO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbR,EAFa,iDAEmCS,UAAUF,GAF7C,+DAGAG,MAAMV,GAHN,cAGbW,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAVvB,kBAaZc,GAbY,4CAAH,sDCGPK,EAAU,SAAC,GAAc,IAAbZ,EAAY,EAAZA,SACrB,ECDwB,SAACA,GACzB,MAA0BvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WACRjB,EAASC,GACRiB,MAAM,SAAAC,GACLxB,QAAQC,IAAIuB,GACZH,EAAS,CACLT,KAAMY,EACNL,SAAS,OAIdM,MAAMzB,QAAQ0B,SACd,CAACpB,IAEGc,EDlBuBO,CAAarB,GAA/BU,EAAZ,EAAOJ,KAAYO,EAAnB,EAAmBA,QAEnB,OACA,qCACA,mCAAMb,KACJa,GAAW,wCACb,qBAAKjB,UAAU,eAAf,SAGIc,EAAOF,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADEA,EAAIlB,aEVT+B,EAAgB,WAEzB,MAAoC7C,mBAAS,CAAC,eAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KACA,OACA,qCACA,+CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ+C,EAAWf,KAAI,SAACR,GACZ,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCX/BwB,EAAUC,SAASC,cAAc,SACvCC,IAASC,OAAO,cAAC,EAAD,IAAiBJ,K","file":"static/js/main.6feb33b7.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const CategoryAdd = ({setCategories})=>{\n    const [inputValue, setInputValue] = useState('')\n    \n    const cambioinput = (e) =>{\n        setInputValue(e.target.value);\n    }\n    const handlesubmit = (e) =>{\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n        setCategories(cats => [inputValue,...cats]);\n        setInputValue('');    \n    }\n        \n    }\n    return(\n    \n        <form onSubmit={handlesubmit}>\n        <input type=\"text\" value={inputValue} onChange={cambioinput}/>\n        \n        </form>   \n    )\n    \n\n}\n\nCategoryAdd.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import React from \"react\";\n\nexport const GifGridItem = ({id,title,url})=>{\n    console.log(id,title,url);\n    return(\n    <div className=\"tarjeta animate__animated animate__fadeIn\">  \n      <img src={url} alt={title}/>  \n      <p> { title} </p>  \n    </div>\n    )\n}\n","export const getGifs = async( category)=>{\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=FVqZMyKFhjUjQxbNV9WYnFnkTBG1BoBf`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n    }","import { GifGridItem } from \"./GifGriditem\";\nimport { useFetchGifs } from \"../hooks/UseFetchGifs\";\n\nexport const GifGird = ({category})=>{\n    const {data:images,loading} = useFetchGifs(category);\n\n    return(\n    <>\n    <h3> {category}</h3> \n    { loading && <p>Loading</p>}\n    <div className=\"tarjeta-grid\">\n    \n    {\n        images.map( img =>(\n            <GifGridItem \n            key={ img.id}\n            {...img} />\n        ))\n\n    }\n   \n    </div>\n    </>\n    )\n}\n","import { useEffect, useState } from \"react/cjs/react.development\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\nexport const useFetchGifs = (category) =>{\n    const [state, Setstate] = useState({\n        data: [], \n        loading: true\n    });\n    \n    useEffect(() =>{\n      getGifs( category)\n      .then( imgs  => {\n        console.log(imgs) \n        Setstate({\n            data: imgs,\n            loading: false\n            }\n            );\n     \n    }).catch(console.error);\n    }, [category])\n    \n    return state;\n}","import React, { useState } from 'react';\nimport { CategoryAdd } from './Components/CategoryAdd';\nimport { GifGird } from './Components/GifGrid';\n\n\nexport const GifExpertApp = (() => {\n    //const categories = ['Onepunch', 'dragonball', 'samuraix']\n    const [categories, setCategories] = useState(['dragonball']);\n    return(\n    <>\n    <h1> GifExpertApp</h1>\n    <CategoryAdd setCategories={ setCategories}/> \n    <hr></hr>\n    \n    <ol>\n        {\n            categories.map((category) => { \n                return <GifGird key={category} category={category}/> \n\n            })\n            \n        }\n    </ol>\n\n    </>);\n\n})\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nconst divroot = document.querySelector('#root');\nReactDOM.render(<GifExpertApp/>, divroot);\n\n"],"sourceRoot":""}